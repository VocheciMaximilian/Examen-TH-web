<!DOCTYPE html>
<html lang="ro">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/stiluri/style.css">
</head>
<body>
    <div class="container">
        <h1>Afișare Cărți</h1>
        
        <!-- 4A - Paragraf pentru afișare număr sortări și filtrări -->
        <p id="statsParagraph"></p>
        <button id="resetStatsBtn" type="button" class="btn-reset">Resetează statistici</button>
        <!-- 4A - Sfârșit paragraf -->
        
        <!-- 3A, 3B, 3C - Controale pentru sortare și filtrare -->
        <div class="controls-section">
            <form id="sortFilterForm" method="GET" action="/carti">
                <!-- 3A - Select pentru sortare după numele autorului -->
                <div class="control-group">
                    <label for="sortOrder">Sortare după numele autorului:</label>
                    <select name="sortOrder" id="sortOrder">
                        <option value="ascendent" <%= locals.sortOrder === 'ascendent' ? 'selected' : '' %>>Ascendent</option>
                        <option value="descendent" <%= locals.sortOrder === 'descendent' ? 'selected' : '' %>>Descendent</option>
                    </select>
                    <button type="submit" name="action" value="sort">Sortează</button>
                </div>
                
                <!-- 3C - Range pentru filtrare după scorul mediu -->
                <div class="control-group">
                    <label for="minScore">Scorul mediu minim: <span id="scoreValue">0</span></label>
                    <input type="range" name="minScore" id="minScore" min="0" max="10" step="0.1" value="<%= locals.minScore || 0 %>">
                    <button type="submit" name="action" value="filter">Filtrează</button>
                </div>
                
                <!-- Păstrarea parametrilor existenți pentru filtrarea după an -->
                <input type="hidden" name="an_minim" value="<%= locals.an_minim || '' %>">
                <input type="hidden" name="an_maxim" value="<%= locals.an_maxim || '' %>">
            </form>
        </div>
        
        <!-- 1B - Rezolvarea cerinței -->
        <!-- 2A - Grid 3 coloane cu pattern background -->
        <div class="carti-grid">
        <% carti.forEach(function(carte, idx) { %>
            <section class="book-section grid-cell c<%= (idx%9)%3+1 %>" >
                <h2><%= carte.titlu %></h2>
                <details open>
                    <summary>observatii</summary>
                    <p><%= carte.nume_autor %>, <%= carte.an_publicare %></p>
                    <p><%= carte.tema %></p>
                </details>
                <!-- 1C - Tabel scoruri -->
                <% if (carte.scoruri && carte.scoruri.length > 0) { %>
                    <table border="1">
                        <tr>
                            <% carte.scoruri.forEach(function(scor) { %>
                                <td><%= scor %></td>
                            <% }); %>
                        </tr>
                    </table>
                    <p>Scor minim: <%= Math.min(...carte.scoruri) %>, Scor maxim: <%= Math.max(...carte.scoruri) %></p>
                    <p>Scor mediu: <%= (carte.scoruri.reduce((a, b) => a + b, 0) / carte.scoruri.length).toFixed(1) %></p>
                <% } %>
                <!-- 1D - Filtrarea se face in backend, vezi index.js -->
            </section>
        <% }); %>
        </div>
    </div>
    
    <script>
        // 3C - Actualizare valoare range în timp real
        document.getElementById('minScore').addEventListener('input', function() {
            document.getElementById('scoreValue').textContent = this.value;
        });
        
        // Inițializare valoare range
        document.addEventListener('DOMContentLoaded', function() {
            const rangeInput = document.getElementById('minScore');
            document.getElementById('scoreValue').textContent = rangeInput.value;
        });

        // 3D - Randomizare scoruri la apasarea tastei r si filtrare/sortare pe scoruri random
        let originalCarti = [];
        let randomCarti = null;
        
        // Salvam datele initiale din DOM
        function extrageCartiDinDOM() {
            const sectiuni = document.querySelectorAll('.book-section');
            let carti = [];
            sectiuni.forEach(sec => {
                const titlu = sec.querySelector('h2').textContent;
                const autor = sec.querySelector('details p').textContent.split(',')[0].trim();
                const an = parseInt(sec.querySelector('details p').textContent.split(',')[1]);
                const scoruri = Array.from(sec.querySelectorAll('table td')).map(td => parseInt(td.textContent));
                const tema = sec.querySelectorAll('details p')[1]?.textContent || '';
                carti.push({
                    titlu, nume_autor: autor, an_publicare: an, tema, scoruri
                });
            });
            return carti;
        }
        
        // La prima incarcare, salvez cartile originale
        document.addEventListener('DOMContentLoaded', function() {
            originalCarti = extrageCartiDinDOM();
        });

        // Genereaza scoruri random pentru fiecare carte
        function genereazaScoruriRandom(carti) {
            return carti.map(carte => {
                let nr = carte.scoruri.length || 4;
                let scoruri = Array.from({length: nr}, () => Math.floor(Math.random()*4)+7); // scoruri 7-10
                return {...carte, scoruri};
            });
        }

        // Redesenare carti in DOM
        function afiseazaCarti(carti) {
            const grid = document.querySelector('.carti-grid');
            grid.innerHTML = '';
            carti.forEach((carte, idx) => {
                let scorMin = Math.min(...carte.scoruri);
                let scorMax = Math.max(...carte.scoruri);
                let scorMed = (carte.scoruri.reduce((a,b)=>a+b,0)/carte.scoruri.length).toFixed(1);
                let scoruriHTML = '<tr>' + carte.scoruri.map(s => `<td>${s}</td>`).join('') + '</tr>';
                grid.innerHTML += `
                <section class="book-section grid-cell c${(idx%9)%3+1}">
                    <h2>${carte.titlu}</h2>
                    <details open>
                        <summary>observatii</summary>
                        <p>${carte.nume_autor}, ${carte.an_publicare}</p>
                        <p>${carte.tema}</p>
                    </details>
                    <table border="1">${scoruriHTML}</table>
                    <p>Scor minim: ${scorMin}, Scor maxim: ${scorMax}</p>
                    <p>Scor mediu: ${scorMed}</p>
                </section>`;
            });
        }

        // 3D - La apasarea tastei r, scorurile devin random
        document.addEventListener('keydown', function(e) {
            if(e.key === 'r' || e.key === 'R') {
                if(!randomCarti) {
                    randomCarti = genereazaScoruriRandom(originalCarti);
                } else {
                    // regenereaza la fiecare apasare
                    randomCarti = genereazaScoruriRandom(originalCarti);
                }
                afiseazaCarti(randomCarti);
            }
        });

        // 3D - Suprascrie filtrarea/sortarea pe frontend daca scorurile sunt random
        document.getElementById('sortFilterForm').addEventListener('submit', function(e) {
            if(randomCarti) {
                e.preventDefault();
                let carti = [...randomCarti];
                // sortare
                let sortOrder = document.getElementById('sortOrder').value;
                carti.sort((a, b) => {
                    if(a.nume_autor < b.nume_autor) return sortOrder==='ascendent'?-1:1;
                    if(a.nume_autor > b.nume_autor) return sortOrder==='ascendent'?1:-1;
                    // daca numele sunt egale, sortam dupa scor minim
                    let minA = Math.min(...a.scoruri);
                    let minB = Math.min(...b.scoruri);
                    return sortOrder==='ascendent' ? minA-minB : minB-minA;
                });
                // filtrare
                let minScore = parseFloat(document.getElementById('minScore').value) || 0;
                if(minScore>0) {
                    carti = carti.filter(carte => (carte.scoruri.reduce((a,b)=>a+b,0)/carte.scoruri.length)>=minScore);
                }
                afiseazaCarti(carti);
            }
        });

        // 4A, 4B - Statistici sortări și filtrări cu localStorage
        function updateStatsParagraph() {
            const sortari = localStorage.getItem('nrSortari') || 0;
            const filtrari = localStorage.getItem('nrFiltrari') || 0;
            document.getElementById('statsParagraph').textContent = `Număr sortări: ${sortari}, Număr filtrări: ${filtrari}`;
        }
        // Inițializare la încărcarea paginii
        document.addEventListener('DOMContentLoaded', function() {
            updateStatsParagraph();
        });
        // Incrementare la fiecare operație
        document.getElementById('sortFilterForm').addEventListener('submit', function(e) {
            if(randomCarti) {
                // ... existing code ...
                // 4A - Incrementare sortare/filtrare frontend
                if(e.submitter && e.submitter.value === 'sort') {
                    localStorage.setItem('nrSortari', parseInt(localStorage.getItem('nrSortari')||0)+1);
                }
                if(e.submitter && e.submitter.value === 'filter') {
                    localStorage.setItem('nrFiltrari', parseInt(localStorage.getItem('nrFiltrari')||0)+1);
                }
                updateStatsParagraph();
            } else {
                // 4A - Incrementare sortare/filtrare backend (pagina se reîncarcă)
                if(e.submitter && e.submitter.value === 'sort') {
                    localStorage.setItem('nrSortari', parseInt(localStorage.getItem('nrSortari')||0)+1);
                }
                if(e.submitter && e.submitter.value === 'filter') {
                    localStorage.setItem('nrFiltrari', parseInt(localStorage.getItem('nrFiltrari')||0)+1);
                }
                // updateStatsParagraph(); // Nu e nevoie, pagina se reîncarcă
            }
        });
        // 4B - Resetare localStorage la click pe buton
        document.getElementById('resetStatsBtn').addEventListener('click', function() {
            localStorage.setItem('nrSortari', 0);
            localStorage.setItem('nrFiltrari', 0);
            updateStatsParagraph();
        });
    </script>
</body>
</html>
